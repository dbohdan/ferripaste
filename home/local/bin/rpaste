#! /usr/bin/env tclsh

package require cmdline

source $env(HOME)/.config/rpaste/config.tcl

proc main argv {
    global config

    lassign [cli $argv] src oneshot expire noId remote url verbose ext

    set filename [file tail $src]
    if {$ext eq {} && [file extension $filename] ne {}} {
        set ext [file extension $filename]
    }
    set rootname [file rootname $filename]
    set id [encode-timestamp [clock seconds]]

    set dest $rootname
    if {!$noId} {
        append dest .$id
    }
    append dest $ext

    set opts --fail
    if {$expire ne {}} {
        lappend opts --header expire:$expire
    }
    if {$remote ne {}} {
        lappend opts --form "remote=$remote;filename=$id"
    }
    if {$url ne {}} {
        lappend opts --form url=$url
    }
    if {$remote eq {} && $url eq {}} {
        set field [expr { $oneshot ? {oneshot} : {file} }]
        lappend opts --form "$field=@$src;filename=$dest"
    }

    if {$verbose} {
        puts stderr [list cURL opts: {*}$opts]
    }

    exec curl \
        --header "Authorization: $config(token)" \
        {*}$opts \
        $config(url) \
        >@ stdout \
        2>@ stderr \
}

proc cli argv {
    set options {
        {1 {One shot}}
        {e.arg {} {Expiration time}}
        {I {No id suffix}}
        {r.arg {} {Remote source URL}}
        {u.arg {} {URL to shorten}}
        {v {Verbose mode}}
        {x.arg {} {File extension}}
    }
    set usage ": [file tail [info script]] \[options\] src \noptions:"

    foreach arg $argv {
        if {$arg in {-? -h -help --help}} {
            usage $options $usage
            exit 0
        }
    }

    try {
        array set opts [::cmdline::getoptions argv $options $usage]
    } trap {CMDLINE USAGE} _ {
        usage $options $usage
        exit 1
    }

    if {(($opts(u) ne {})
         + ($opts(r) ne {})
         + [llength $argv]
         != 1)
        || ($opts(1) && [llength $argv] != 1)} {
        usage $options $usage
        exit 1
    }

    list [lindex $argv 0] $opts(1) $opts(e) $opts(I) $opts(r) $opts(u) $opts(v) $opts(x)
}

proc usage {options usage} {
    puts stderr [::cmdline::usage $options $usage]
}

proc encode-timestamp t {
    return $t
}

main $argv
