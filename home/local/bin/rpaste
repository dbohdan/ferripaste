#! /usr/bin/env python3

from __future__ import annotations

import argparse
import configparser
import re
import shlex
import subprocess as sp
import sys
import time
from pathlib import Path

CONFIG_FILE = Path.home() / ".config/rpaste/config.ini"
CONFIG_SECTION = "rustypaste"


def main() -> None:
    args = cli()
    conf = config()[CONFIG_SECTION]

    ext = args.ext
    dest = ""
    upload_id = str(int(time.time()))

    if args.file:
        if not ext:
            ext = args.file.suffix

        dest = re.sub(r"[\s%]", "-", args.file.stem)
        if not args.no_id:
            dest = f"{dest}.{upload_id}"
        dest += ext

    opts = ["--fail"]

    if args.expire_time:
        opts.extend(["--header", f"expire:{args.expire_time}"])

    if args.remote_url:
        opts.extend(["--form", f"remote={args.remote_url};filename={upload_id}"])
    elif args.url_to_shorten:
        opts.extend(["--form", f"url={args.url_to_shorten}"])
    else:
        field = "oneshot" if args.one_shot else "file"
        opts.extend(["--form", f"{field}=@{args.file};filename={dest}"])

    if args.verbose:
        print(f"cURL opts: {shlex.join(opts)}", file=sys.stderr)

    try:
        sp.run(
            ["curl", "--header", f"Authorization: {conf['token']}", *opts, conf["url"]],
            check=True,
        )
    except sp.CalledProcessError as e:
        sys.exit(e.returncode)


def cli() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument("-1", action="store_true", dest="one_shot", help="One shot")
    parser.add_argument(
        "-e",
        dest="expire_time",
        help="Expiration time",
        metavar="TIME",
    )
    parser.add_argument("-I", action="store_true", dest="no_id", help="No id suffix")

    action = parser.add_mutually_exclusive_group(required=True)
    action.add_argument(
        "file",
        help="File to upload",
        nargs=argparse.OPTIONAL,
        type=Path,
    )
    action.add_argument(
        "-r",
        dest="remote_url",
        help="Remote source URL",
        metavar="URL",
    )
    action.add_argument(
        "-u",
        dest="url_to_shorten",
        help="URL to shorten",
        metavar="URL",
    )

    parser.add_argument("-v", action="store_true", dest="verbose", help="Verbose mode")
    parser.add_argument(
        "-x",
        default="",
        dest="ext",
        help="File extension",
        metavar="EXT",
    )

    return parser.parse_args()


def config() -> configparser.ConfigParser:
    config = configparser.ConfigParser()
    config.read_string(CONFIG_FILE.read_text())

    sec = config[CONFIG_SECTION]
    sec["token"] = sp.run(
        ["pass", "show", sec["pass-name"]],
        capture_output=True,
        check=True,
        text=True,
    ).stdout.strip()

    return config


if __name__ == "__main__":
    main()
